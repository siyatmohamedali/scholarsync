rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants admin privileges based on the existence of a document in /roles_admin/{userId}.
     * @path /roles_admin/{userId}
     * @allow (create) - If the user's ID matches the document ID.
     * @deny (create) - If the user's ID does not match the document ID.
     * @principle Enforces document ownership for writes.
     */
    match /roles_admin/{userId} {
      function isAdmin(userId) {
        return exists(/databases/$(database)/documents/roles_admin/$(userId));
      }
      allow get: if false;
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access and admin-only write access for scholarships.
     * @path /scholarships/{scholarshipId}
     * @allow (get, list) - Anyone can read scholarship data.
     * @allow (create, update, delete) - Only admins can modify scholarship data.
     * @deny (create, update, delete) - Non-admins cannot modify scholarship data.
     * @principle Restricts write access to authorized admins.
     */
    match /scholarships/{scholarshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && isAdmin(request.auth.uid);
      allow update: if request.auth != null && isAdmin(request.auth.uid);
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    /**
     * @description Allows public read access and admin-only write access for categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - Anyone can read category data.
     * @allow (create, update, delete) - Only admins can modify category data.
     * @deny (create, update, delete) - Non-admins cannot modify category data.
     * @principle Restricts write access to authorized admins.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && isAdmin(request.auth.uid);
      allow update: if request.auth != null && isAdmin(request.auth.uid);
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    /**
     * @description Allows public read access and admin-only write access for blog posts.
     * @path /blog_posts/{blogPostId}
     * @allow (get, list) - Anyone can read blog post data.
     * @allow (create, update, delete) - Only admins can modify blog post data.
     * @deny (create, update, delete) - Non-admins cannot modify blog post data.
     * @principle Restricts write access to authorized admins.
     */
    match /blog_posts/{blogPostId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && isAdmin(request.auth.uid);
      allow update: if request.auth != null && isAdmin(request.auth.uid);
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    /**
     * @description Allows public read access and admin-only write access for ad placements.
     * @path /ad_placements/{adPlacementId}
     * @allow (get, list) - Anyone can read ad placement data.
     * @allow (create, update, delete) - Only admins can modify ad placement data.
     * @deny (create, update, delete) - Non-admins cannot modify ad placement data.
     * @principle Restricts write access to authorized admins.
     */
    match /ad_placements/{adPlacementId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && isAdmin(request.auth.uid);
      allow update: if request.auth != null && isAdmin(request.auth.uid);
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    /**
     * @description Allows anyone to create a subscriber entry, but restricts listing and other modifications.
     * @path /subscribers/{subscriberId}
     * @allow (create) - Anyone can subscribe to the newsletter.
     * @deny (get, list, update, delete) - No one can read, list, update, or delete subscriber data.
     * @principle Allows open subscription while protecting subscriber privacy.
     */
    match /subscribers/{subscriberId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}